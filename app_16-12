# libraries ----------
library(ggplot2)
library(glue)
library(dplyr)
library(shinyWidgets)
library(colourpicker)
library(DT)
library(shiny)
library(patchwork)
library(gridExtra)

# load data -----------
load("Data/micro_segmented_table_coordinates.RData", verbose = T)
load("Data/micro_segmented_GNL_matrix.RData", verbose = T)
load("Data/micro_segmented_LOH_matrix.RData", verbose = T)
load("Data/segmented_table_all_samples.RData", verbose = T)
load("Data/cumulative_chromosome_positions.RData", verbose = T)
load("Data/annot_list.RData", verbose = T)
load("Data/gene_table_hg38.RData", verbose = T)
load("Data/cytoband_hg38.Rdata", verbose = T)

cumul_chrom_df <- data.frame(chromosome = names(cumul_chrom_ends),
                             start_cumul_chrom = c(0, cumul_chrom_ends[-length(cumul_chrom_ends)]),
                             end_cumul_chrom = cumul_chrom_ends) %>% 
  mutate(middle_cumul = (start_cumul_chrom+end_cumul_chrom)/2)
rownames(cumul_chrom_df) <- paste0("chr", cumul_chrom_df$chromosome)

gene_choices <- unique(gene_table$gene_name)

# choose minimal number of samples to display a segment --------------
min_non_na <- 5

########### End of PARAMETERS FOR TUMOR BY TUMOR PLOT ###############

ui <- fluidPage(
  titlePanel("Shiny CNV - Explore copy-number variations"),
  
  sidebarLayout(
    sidebarPanel(
      
      div(style = "text-align: center;",
          actionButton("validate_global", "Validate", icon("refresh"))),
      br(),
      
      helpText("Select the graph(s) to be displayed"),
      fluidRow(
        div(class = "btn-group", 
            switchInput(inputId = "freq", value = TRUE, label = "Frequency", 
                        size = "small"),
            div(class = "btn-group", 
                switchInput(inputId = "all_copy_number", value = TRUE, label = "All", 
                            size = "small"))
        ),
        
        helpText("Zoom in on a chromosome"),
        switchInput(inputId = "zoom", value = FALSE, label = "Zoom", size = "small"),
        conditionalPanel(
          condition = "input.zoom",
          selectInput("chrom", 
                      label = "Choice of chromosome",
                      choices = c("Chromosome 1" = "1",
                                  "Chromosome 2" = "2",
                                  "Chromosome 3" = "3",
                                  "Chromosome 4" = "4",
                                  "Chromosome 5" = "5",
                                  "Chromosome 6" = "6",
                                  "Chromosome 7" = "7",
                                  "Chromosome 8" = "8",
                                  "Chromosome 9" = "9",
                                  "Chromosome 10" = "10",
                                  "Chromosome 11" = "11",
                                  "Chromosome 12" = "12",
                                  "Chromosome 13" = "13",
                                  "Chromosome 14" = "14",
                                  "Chromosome 15" = "15",
                                  "Chromosome 16" = "16",
                                  "Chromosome 17" = "17",
                                  "Chromosome 18" = "18",
                                  "Chromosome 19" = "19",
                                  "Chromosome 20" = "20",
                                  "Chromosome 21" = "21",
                                  "Chromosome 22" = "22",
                                  "Chromosome X" = "X")),
          sliderInput("zoom_start", "Zoom Start:", min = 0, max = 100, value = 0),
          sliderInput("zoom_end", "Zoom End:", min = 0, max = 100, value = 100)
        ),
        
        helpText("Highlighting a locus"),
        switchInput(inputId = "locus", value = FALSE, label = "Locus", size = "small"),
        conditionalPanel(
          condition = "input.locus",
          selectInput("selected_locus", "Select Locus", choices = unique(paste0("chr", cyto$Chromosome, cyto$Band))),
        ),
        
        sliderInput("multiplier", "Choose the multiplier for type 2 events: ", 
                    min = 1, max = 50, value = 10),
        
        helpText("Choice of y-axis limits"),
        numericInput("yAxisMin", "Y-Axis Min:", value = -1.15, step = 0.1),
        numericInput("yAxisMax", "Y-Axis Max:", value = 1.15, step = 0.1),
        
        helpText("Use the 'Highlight LOH' button to prioritize the display of LOH."),
        switchInput(inputId = "highlightLOH", value = FALSE, label = "highlight LOH", size = "small"),
        
        helpText("Show sample id for tumor by tumor plot"),
        switchInput(inputId = "showsampleid", value = FALSE, label = "Sample id", size = "small"),
        
        helpText("Choose colors for the plot"),
        switchInput(inputId = "choice_color", value = FALSE, label = "Color", size = "small"),
        conditionalPanel(
          condition = "input.choice_color",
          colourInput("colorLOH", "Color for LOH", "grey"),
          colourInput("color0", "Color for 0", "white"),
          colourInput("color1", "Color for 1", "#fb9a99"),
          colourInput("color2", "Color for 2", "red"),
          colourInput("colorminus_1", "Color for -1", "lightblue"),
          colourInput("colorminus_2", "Color for -2", "blue"),
        ),
        br(),
        helpText("Choice of samples"),
        switchInput(inputId = "choice_group1", value = FALSE, label = "Group 1", size = "small"),
        conditionalPanel(
          condition = "input.choice_group1",
          pickerInput(inputId = "tsne_HCA",
                      label = "Highlight HCA",
                      choices = list("H HCA" = "H_HCA",
                                     "b HCA" = "b_HCA",
                                     "b_I HCA" = "b_I_HCA",
                                     "I HCA" = "I_HCA",
                                     "sh HCA" = "sh_HCA"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
          
          pickerInput(inputId = "tsne_HCC",
                      label = "Hepatocellular carciomas (Highlight HCC)",
                      choices = list("HCC G1" = "HCC_G1",
                                     "HCC G2" = "HCC_G2",
                                     "HCC G3" = "HCC_G3",
                                     "HCC G4" = "HCC_G4",
                                     "HCC G5" = "HCC_G5",
                                     "HCC G6" = "HCC_G6",
                                     "pediatric HCC" = "pediatric_HCC",
                                     "APC" = "APC",
                                     "CTNNB1" = "CTNNB1",
                                     "CTNNB1+TP53" = "CTNNB1+TP53",
                                     "TP53" = "TP53",
                                     "AXIN1+TP53" = "AXIN1+TP53",
                                     "AXIN1" = "AXIN1",
                                     "IRF2" = "IRF2",
                                     "HNF1A" = "HNF1A",
                                     "BAP1" = "BAP1",
                                     "CCNA2/E1" = "CCNA2/E1",
                                     "Inflamed" = "Inflamed",
                                     "non-inflamed" = "non-inflamed"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
          
          pickerInput(inputId = "tsne_FLC",
                      label = "Fibrolamellar carcinomas (Highlight FLC)",
                      choices = list("BAP1 HCC" = "BAP1_HCC",
                                     "DNAJB1-PRKACA" = "fus_FLC"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
          
          pickerInput(inputId = "tsne_HB",
                      label = "Hepatoblastomas (Highlight HB)",
                      choices = list("HB H-hot" = "HB_Hh",
                                     "HB H-cold" = "HB_Hc",
                                     "HB LP" = "HB_LP",
                                     "HB M" = "HB_M"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T,
                      selected = c("HB H-hot" = "HB_Hh",
                                   "HB H-cold" = "HB_Hc",
                                   "HB LP" = "HB_LP",
                                   "HB M" = "HB_M")),
          
          pickerInput(inputId = "tsne_M",
                      label = "Highlight Macronodule",
                      choices = list("Macronodule" = "macronodule"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
          
          pickerInput(inputId = "tsne_CL",
                      label = "Highlight cell lines",
                      choices = list("HB cell lines" = "HB_CL",
                                     "Ped HCC cell lines" = "ped_HCC_CL",
                                     "Adult HCC cell lines" = "HCC_CL"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
        ),
        
        helpText("Choice of samples"),
        switchInput(inputId = "choice_group2", value = FALSE, label = "Group 2", size = "small"),
        conditionalPanel(
          condition = "input.choice_group2",
          pickerInput(inputId = "tsne2_HCA",
                      label = "Highlight HCA",
                      choices = list("H HCA" = "H_HCA",
                                     "b HCA" = "b_HCA",
                                     "b_I HCA" = "b_I_HCA",
                                     "I HCA" = "I_HCA",
                                     "sh HCA" = "sh_HCA"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
          
          pickerInput(inputId = "tsne2_HCC",
                      label = "Hepatocellular carciomas (Highlight HCC)",
                      choices = list("HCC G1" = "HCC_G1",
                                     "HCC G2" = "HCC_G2",
                                     "HCC G3" = "HCC_G3",
                                     "HCC G4" = "HCC_G4",
                                     "HCC G5" = "HCC_G5",
                                     "HCC G6" = "HCC_G6",
                                     "pediatric HCC" = "pediatric_HCC",
                                     "APC" = "APC",
                                     "CTNNB1" = "CTNNB1",
                                     "CTNNB1+TP53" = "CTNNB1+TP53",
                                     "TP53" = "TP53",
                                     "AXIN1+TP53" = "AXIN1+TP53",
                                     "AXIN1" = "AXIN1",
                                     "IRF2" = "IRF2",
                                     "HNF1A" = "HNF1A",
                                     "BAP1" = "BAP1",
                                     "CCNA2/E1" = "CCNA2/E1",
                                     "Inflamed" = "Inflamed",
                                     "non-inflamed" = "non-inflamed"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T,
                      selected = c("HCC G1" = "HCC_G1",
                                   "HCC G2" = "HCC_G2",
                                   "HCC G3" = "HCC_G3")),
          
          pickerInput(inputId = "tsne2_FLC",
                      label = "Fibrolamellar carcinomas (Highlight FLC)",
                      choices = list("BAP1 HCC" = "BAP1_HCC",
                                     "DNAJB1-PRKACA" = "fus_FLC"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
          
          pickerInput(inputId = "tsne2_HB",
                      label = "Hepatoblastomas (Highlight HB)",
                      choices = list("HB H-hot" = "HB_Hh",
                                     "HB H-cold" = "HB_Hc",
                                     "HB LP" = "HB_LP",
                                     "HB M" = "HB_M"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
          
          pickerInput(inputId = "tsne2_M",
                      label = "Highlight Macronodule",
                      choices = list("Macronodule" = "macronodule"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
          
          pickerInput(inputId = "tsne2_CL",
                      label = "Highlight cell lines",
                      choices = list("HB cell lines" = "HB_CL",
                                     "Ped HCC cell lines" = "ped_HCC_CL",
                                     "Adult HCC cell lines" = "HCC_CL"),
                      options = list(`actions-box` = T, size = 10, `selected-text-format` = "count > 2"),
                      multiple = T),
        ),
        
        fileInput("file_samples",
                  width = '80%',
                  label = "Input sample list (as .txt)",
                  accept = c(".txt")),
        tableOutput('table'),
        
        br(),
        helpText("Choose any gene by typing and selecting"),
        switchInput(inputId = "gene_to_highlight", value = FALSE, label = "Choose gene", size = "small"),
        conditionalPanel(
          condition = "input.gene_to_highlight",
          selectizeInput(inputId = "genesToHighlightUp", label = "Genes to highlight up", selected = "DPM1",
                         choices = NULL, 
                         options = list(maxOptions = 20, searchConjunction = "and"),
                         multiple = T,
                         width = "100%"),
          
          selectizeInput(inputId = "genesToHighlightDown", label = "Genes to highlight down", selected = "FGR",
                         choices = NULL, 
                         options = list(maxOptions = 20, searchConjunction = "and"),
                         multiple = T,
                         width = "100%"),
        ),
      ),
    ),
    
    mainPanel(
      plotOutput("plotFrequency", height = 300),
      plotOutput("plotFrequency2", height = 300),
      plotOutput("plotTumorByTumor", height = 300),
      dataTableOutput("results_table"),
      downloadButton("downloadPlotFrequency", "Download Frequency Plot"),
      downloadButton("downloadPlotTumorByTumor", "Download Tumor By Tumor Plot"),
      downloadButton("downloadTable", "Download Statistical Table"),
    )
  )
)


server <- function(input, output, session) {
  start_time <- Sys.time()
  updateSelectizeInput(session, "genesToHighlightUp", choices = gene_choices, server = TRUE)
  updateSelectizeInput(session, "genesToHighlightDown", choices = gene_choices, server = TRUE)
  
  # Reactive to determine minimum and maximum slider values according to the selected chromosome
  observe({
    selected_chrom <- input$chrom
    
    if (!is.null(selected_chrom)) {
      chrom_info <- cumul_chrom_df[cumul_chrom_df$chromosome == selected_chrom, ]
      
      if (!is.null(chrom_info)) {
        updateSliderInput(session, "zoom_start", min = 0,
                          max = chrom_info$end_cumul_chrom - chrom_info$start_cumul_chrom, 
                          value = 0)
        updateSliderInput(session, "zoom_end", min = 0, 
                          max = chrom_info$end_cumul_chrom - chrom_info$start_cumul_chrom,
                          value = chrom_info$end_cumul_chrom - chrom_info$start_cumul_chrom)
      }
    }
  })
  
  all <- eventReactive(input$validate_global, {
    type_2_event_multiplier <- input$multiplier
    zoom_on_one_chrom <- input$zoom
    zoom_start <- input$zoom_start
    zoom_end <- input$zoom_end
    display_locus <- input$locus
    selected_locus <- input$selected_locus
    chrom_zoom <- input$chrom
    genes_to_highlight_up <- input$genesToHighlightUp
    genes_to_highlight_down <- input$genesToHighlightDown
    samples_of_interest <- unique(c(unlist(annot_list[c(input$tsne_HCA, input$tsne_HCC, 
                                                        input$tsne_FLC, input$tsne_HB, 
                                                        input$tsne_CL, input$tsne_M)]),
                                    my_data()))
    samples_of_interest2 <- unique(c(unlist(annot_list[c(input$tsne2_HCA, input$tsne2_HCC, 
                                                         input$tsne2_FLC, input$tsne2_HB, 
                                                         input$tsne2_CL, input$tsne2_M)]),
                                     my_data()))
    samples_title <- c(input$tsne_HCA, input$tsne_HCC, input$tsne_FLC, input$tsne_HB, input$tsne_CL, input$tsne_M)
    samples_title2 <- c(input$tsne2_HCA, input$tsne2_HCC, input$tsne2_FLC, input$tsne2_HB, input$tsne2_CL, input$tsne2_M)
    highlight_LOH <- input$highlightLOH 
    show_sample_id <- input$showsampleid 
    GNL_cols <- c("LOH" = input$colorLOH,
                  "0" = input$color0,
                  "1" = input$color1,
                  "2" = input$color2,
                  "-1" = input$colorminus_1,
                  "-2" = input$colorminus_2)
    yaxis <- c("min" = input$yAxisMin,
               "max" = input$yAxisMax)
    return(list(
      type_2_event_multiplier = type_2_event_multiplier,
      zoom_on_one_chrom = zoom_on_one_chrom,
      zoom_start = zoom_start,
      zoom_end = zoom_end,
      display_locus = display_locus,
      selected_locus = selected_locus,
      chrom_zoom = chrom_zoom,
      genes_to_highlight_up = genes_to_highlight_up,
      genes_to_highlight_down = genes_to_highlight_down,
      samples_of_interest = samples_of_interest,
      samples_of_interest2 = samples_of_interest2,
      samples_title = samples_title,
      samples_title2 = samples_title2,
      highlight_LOH = highlight_LOH,
      show_sample_id = show_sample_id,
      GNL_cols = GNL_cols,
      yaxis = yaxis
    ))
  })
  
  my_data <- reactive({
    inFile <- input$file_samples
    if (is.null(inFile)) {
      return(NULL)
    } else {      
      data <- read.delim(inFile$datapath, sep = "\t")
      colnames(data) <- c("CHCID")
      samples_data <- data$CHCID
      print("my_data")
      print(samples_data)
      return(samples_data)
    }
  })
  
  gg_frequency <- reactiveVal(NULL)
  gg_frequency2 <- reactiveVal(NULL)
  gg_tum_tum <- reactiveVal(NULL)
  table_stat <- reactiveVal(NULL)
  observe({
    print("In observe")
    
    # variables
    type_2_event_multiplier <- all()$type_2_event_multiplier
    zoom_on_one_chrom <- all()$zoom_on_one_chrom
    zoom_start <- all()$zoom_start
    zoom_end <- all()$zoom_end
    display_locus <- all()$display_locus
    selected_locus <- all()$selected_locus
    chrom_zoom <- all()$chrom_zoom
    genes_to_highlight_up <- all()$genes_to_highlight_up
    genes_to_highlight_down <- all()$genes_to_highlight_down
    samples_of_interest <- all()$samples_of_interest
    samples_of_interest2 <- all()$samples_of_interest2
    samples_title <- all()$samples_title
    samples_title2 <- all()$samples_title2
    highlight_LOH <- all()$highlight_LOH
    show_sample_id <- all()$show_sample_id
    GNL_cols <- all()$GNL_cols
    yaxis <- all()$yaxis
    print("Updated variables")
    
    # get coordinates of genes of interest ----------
    # this needs to be done each time you change the genes to highlight
    gene_table_high_up <- gene_table %>% 
      filter(gene_name %in% genes_to_highlight_up, 
             chr %in% paste0("chr", chrom_zoom) | !zoom_on_one_chrom) %>% 
      mutate(start_cumul_chrom = start + cumul_chrom_df[chr, "start_cumul_chrom"],
             end_cumul_chrom = end + cumul_chrom_df[chr, "start_cumul_chrom"],
             middle_cumul = c(start_cumul_chrom + end_cumul_chrom)/2)
    
    gene_table_high_down <- gene_table %>% 
      filter(gene_name %in% genes_to_highlight_down, 
             chr %in% paste0("chr", chrom_zoom) | !zoom_on_one_chrom) %>% 
      mutate(start_cumul_chrom = start + cumul_chrom_df[chr, "start_cumul_chrom"],
             end_cumul_chrom = end + cumul_chrom_df[chr, "start_cumul_chrom"],
             middle_cumul = c(start_cumul_chrom + end_cumul_chrom)/2)
    print("Get coordinates of genes of interest")
    
    # functions
    generate_frequency_plot <- function(samples_of_interest, samples_title, group){
      # restrict to samples of interest and compute frequency ----------
      # this needs to be done each time you change the samples of interest
      gnl_samples <- gnl[, samples_of_interest]
      loh_samples <- loh[, samples_of_interest]
      
      df_all_segs$GNL_gain <- apply(gnl_samples, 1, function(z) mean(z >= 1, na.rm = T))
      df_all_segs$GNL_amp <- apply(gnl_samples, 1, function(z) mean(z == 2, na.rm = T))
      
      df_all_segs$GNL_del <- apply(gnl_samples, 1, function(z) mean(z <= -1, na.rm = T))
      df_all_segs$GNL_hdel <- apply(gnl_samples, 1, function(z) mean(z == -2, na.rm = T))
      
      df_all_segs$loh <- apply(loh_samples, 1, function(z) mean(z, na.rm = T))
      print("restrict to samples of interest and compute frequency")
      
      # plot frequency ------------
      # base of ggplot
      gg_frequency <- df_all_segs %>% 
        filter(known_GNL_all_samples >= min_non_na) %>%
        filter(chromosome %in% chrom_zoom | !zoom_on_one_chrom) %>% 
        ggplot(aes(xmin = start_cumul_chrom, xmax = end_cumul_chrom, ymin = 0)) +
        geom_rect(aes(ymax = GNL_gain), fill = GNL_cols["1"], alpha =1) +
        geom_rect(aes(ymax = type_2_event_multiplier*GNL_amp), fill = GNL_cols["2"],alpha=1) +
        geom_hline(yintercept = 0) +
        scale_x_continuous(expand = c(0, 0)) +
        scale_y_continuous("Gain\nLoss\nLOH",  expand = c(0, 0),
                           limits = c(yaxis["min"], yaxis["max"]),
                           breaks = 0.25*(-4:4), labels = c(paste0(25*4:0, "%"), paste0(25*1:4, "%")),
                           sec.axis = sec_axis(trans = ~.*type_2_event_multiplier, name = "Amplification\nHomozygous del.",
                                               breaks = 0.25*type_2_event_multiplier*(-4:4), 
                                               labels = c(paste0(25/type_2_event_multiplier*4:0, "%"),
                                                          paste0(25/type_2_event_multiplier*1:4, "%")))) +
        theme_classic() +
        theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
              axis.title.y = element_text(angle = 0, vjust = .5),
              axis.title.y.right = element_text(angle = 0, vjust = .5),
              panel.grid.major.y = element_line()) 
      
      # Locus
      if(display_locus){
        locus <- cyto[grep(selected_locus, paste0("chr", cyto$Chromosome, cyto$Band)), ]
        chr <- as.numeric(locus$Chromosome)
        start_cumul <- cumul_chrom_df[chr, "start_cumul_chrom"]
        print(paste("chr",chr))
        print(paste("start_cumul",start_cumul))
        gg_frequency <- gg_frequency +
          geom_vline(aes(xintercept = (start_cumul + locus$Start + locus$End) / 2),
                     linetype = "dashed", color = "red")+
          geom_label(aes(x = (start_cumul + locus$Start + locus$End) / 2, y = 1.05, 
                         label = selected_locus),
                     color = "red", angle = 45, hjust = 0.5, vjust = 0.5)
        print("fin locus")
      }
      
      # choose if you show first the deletions or the LOH
      if (highlight_LOH) {
        gg_frequency <- gg_frequency +
          geom_rect(aes(ymax = -GNL_del), fill = GNL_cols["-1"], alpha = 1) +
          geom_rect(aes(ymax = -loh), fill = GNL_cols["LOH"], alpha=1) +
          geom_rect(aes(ymax = -type_2_event_multiplier*GNL_hdel), fill = GNL_cols["-2"],alpha=1)
      } else {
        gg_frequency <- gg_frequency +
          geom_rect(aes(ymax = -loh), fill = GNL_cols["LOH"],alpha=1) +
          geom_rect(aes(ymax = -GNL_del), fill = GNL_cols["-1"],alpha=1) +
          geom_rect(aes(ymax = -type_2_event_multiplier*GNL_hdel), fill = GNL_cols["-2"],alpha=1)
      }
      
      # choose if you zoom on one chromosome or show all chromosomes
      if (!zoom_on_one_chrom) {
        gg_frequency <- gg_frequency +
          geom_vline(xintercept = c(0, cumul_chrom_ends), linetype = "dashed") +
          geom_text(data = cumul_chrom_df, aes(x = middle_cumul, y = -0.95, label = chromosome)) +
          ggtitle(glue("Group {group}\nFrequency of copy-number alterations in {length(samples_of_interest)} samples\nsamples are {paste(samples_title, collapse = ', ')}"))
      } else {
        chrom_info <- cumul_chrom_df[cumul_chrom_df$chromosome == chrom_zoom, ]
        start_chrom <- chrom_info$start_cumul_chrom
        print(start_chrom)
        print(zoom_start)
        print(zoom_end)
        
        gg_frequency <- gg_frequency +
          coord_cartesian(xlim = c(start_chrom + zoom_start, start_chrom + zoom_end)) +
            scale_x_continuous(breaks = seq(start_chrom + zoom_start, 
                                            start_chrom + zoom_end, by = (start_chrom+zoom_end)/5)) +
          annotate("text", x = seq(start_chrom + zoom_start, start_chrom + zoom_end, 
                                   by = (start_chrom+zoom_end)/5),
                   y = -1.01, 
                   label = seq(start_chrom + zoom_start, start_chrom + zoom_end, by = (start_chrom+zoom_end)/5),
                   vjust = 0,
                   hjust = 1) +
          ggtitle(glue("Group {group}\nFrequency of copy-number alterations in {length(samples_of_interest)} samples, zoom on chr{chrom_zoom}\nssamples are {paste(samples_title, collapse = ', ')}"))
      }
      
      # add information about genes of interest
      gg_frequency <- gg_frequency +
        geom_vline(xintercept = gene_table_high_up$middle_cumul, linetype = "dashed", color = GNL_cols["2"]) +
        geom_vline(xintercept = gene_table_high_down$middle_cumul, linetype = "dashed", color = GNL_cols["-2"]) +
        geom_label(data = gene_table_high_up, aes(x = middle_cumul, y = 1.08, label = gene_name),
                   color = GNL_cols["2"], fontface = "italic") +
        geom_label(data = gene_table_high_down, aes(x = middle_cumul, y = -1.08, label = gene_name),
                   color = GNL_cols["-2"], fontface = "italic")
      
      print(gg_frequency)
      return(gg_frequency)
    }
    
    # Group 1
    output$plotFrequency <- renderPlot({
      if (input$freq & input$choice_group1) {
        gg_frequency(generate_frequency_plot(samples_of_interest, samples_title,1))
      }
    })
    
    # Group 2
    output$plotFrequency2 <- renderPlot({
      if (input$freq & input$choice_group2) {
        gg_frequency2(generate_frequency_plot(samples_of_interest2, samples_title2,2))
      }
    })
    
    output$plotTumorByTumor <- renderPlot({
      group1_info <- ""
      group2_info <- ""
      group1_title <- ""
      group2_title <- ""
      sample_to_display <- c()
      if (input$choice_group1){
        sample_to_display <- c(sample_to_display, samples_of_interest)
        group1_info <- glue("{length(samples_of_interest)} samples  (Group 1)")
        group1_title <- glue("{paste(samples_title, collapse = ', ')}")
      }
      
      if (input$choice_group2){
        sample_to_display <- c(sample_to_display, samples_of_interest2)
        group2_info <- glue("and {length(samples_of_interest2)} samples (Group 2)")
        group2_title <- glue("and {paste(samples_title2, collapse = ', ')}")
      }
      
      if (input$all_copy_number){
        
        # plot tumor by tumor ------------
        # restrict seg table to the samples of interest
        wxs_seg_i <- wxs_seg %>% 
          filter(CHCID %in% sample_to_display) %>%
          filter(chromosome %in% chrom_zoom | !zoom_on_one_chrom)  %>%
          mutate(GNL_LOH = ifelse(GNL == 0 & LOH == 1, "LOH", GNL),
                 Group = ifelse(CHCID %in% samples_of_interest, "Group 1", "Group 2"))
        
        # choose if you show first the deletions or the LOH
        if (highlight_LOH) {
          wxs_seg_i <- wxs_seg_i %>% 
            mutate(GNL_LOH = ifelse(abs(GNL) == 2, GNL, ifelse(LOH == 1, "LOH", GNL)))
        }
        
        # choose order of samples, according to genes to highlight
        sample_order <- c(samples_of_interest, samples_of_interest2)
        for (gene_i in rev(union(genes_to_highlight_up, genes_to_highlight_down))) {
          print(gene_i)
          gene_i_coord <- gene_table %>% 
            filter(gene_name == gene_i) %>% 
            mutate(chr = sub("chr", "", chr)) %>% 
            select(chr, start, end)
          sample_order <- wxs_seg_i %>% 
            filter(chromosome == gene_i_coord$chr, start <= gene_i_coord$end, end >= gene_i_coord$start) %>% 
            filter(GNL_LOH != 0) %>% 
            arrange(factor(GNL_LOH, levels = names(GNL_cols))) %>% 
            pull(CHCID) %>% 
            unique() %>% 
            union(sample_order)
        }
        
        sample_order <- rev(sample_order)
        #print(sample_order)
        
        # base of ggplot
        gg_tum_tum <- wxs_seg_i %>% 
          ggplot(aes(xmin = start_cumul_chrom, xmax = end_cumul_chrom)) +
          geom_rect(aes(ymin = as.numeric(factor(CHCID, levels = sample_order)) -0.45,
                        ymax = as.numeric(factor(CHCID, levels = sample_order)) + 0.45, 
                        fill = factor(GNL_LOH))) +
          scale_x_continuous(expand = c(0, 0)) +
          scale_y_continuous(breaks = as.numeric(factor(sample_order, levels = sample_order)), labels = sample_order) +
          scale_fill_manual(values = GNL_cols, "GNL", limits = names(GNL_cols)) +
          theme_classic() +
          theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
                axis.title.y = element_blank(),
                axis.title.y.right = element_blank(),
                panel.grid.major.y = element_line()) +
          geom_hline(yintercept = length(samples_of_interest2) + 0.5, linetype = "dashed", color = "black")
        
        # choose if you zoom on one chromosome or show all chromosomes
        if (!zoom_on_one_chrom) {
          gg_tum_tum <- gg_tum_tum +
            geom_vline(xintercept = c(0, cumul_chrom_ends), linetype = "dashed") +
            geom_text(data = cumul_chrom_df, aes(x = middle_cumul, y = -0.95, label = chromosome)) +
            ggtitle(glue("All copy-number alterations in {group1_info} {group2_info} \nsamples are {group1_title} {group2_title}"))
        } else {
          gg_tum_tum <- gg_tum_tum +
            ggtitle(glue("All copy-number alterations in {group1_info} {group2_info}, zoom on chr{chrom_zoom}\nsamples are {group1_title} {group2_title}"))
        }
        
        # add information about genes of interest
        gg_tum_tum <- gg_tum_tum +
          geom_vline(xintercept = gene_table_high_up$middle_cumul, linetype = "dashed", color = GNL_cols["2"]) +
          geom_vline(xintercept = gene_table_high_down$middle_cumul, linetype = "dashed", color = GNL_cols["-2"]) +
          geom_label(data = gene_table_high_up, aes(x = middle_cumul, y = length(sample_order) + 2, label = gene_name),
                     color = GNL_cols["2"], fontface = "italic") +
          geom_label(data = gene_table_high_down, aes(x = middle_cumul, y = length(sample_order) + 2, label = gene_name),
                     color = GNL_cols["-2"], fontface = "italic") 
        
        # choose if you show sample name
        if (!show_sample_id) gg_tum_tum <- gg_tum_tum + theme(axis.text.y = element_blank())
        
        print(gg_tum_tum)
        gg_tum_tum(gg_tum_tum)
      }
    })
    
    # Statistiques
    gene_names_to_find <- c(genes_to_highlight_up,genes_to_highlight_down)
    print(gene_names_to_find)
    
    generate_stats_for_group <- function(samples_of_interest){
      results_list <- list()
      for (gene in gene_names_to_find) {
        gene_info <- gene_table %>%
          filter(gene_name == gene)
        
        # position gene
        start_position <- gene_info$start
        end_position <- gene_info$end
        print(start_position)
        print(end_position)
        
        wxs_seg_bis <- wxs_seg %>% 
          filter(CHCID %in% samples_of_interest, 
                 start <= end_position,
                 end >= start_position) %>%
          group_by(CHCID) %>%
          summarise(GNL = case_when(any(GNL == -2)~"-2",
                                    any(GNL == 2)~"2",
                                    any(GNL == -1)~"-1",
                                    any(GNL == 1)~"1",
                                    any(GNL == 0)~"0",
                                    TRUE~"NA"),
                    LOH = ifelse(any(LOH == 1),"LOH","no LOH"))
        
        #print(wxs_seg_bis)
        
        # occurence gnl, loh
        gnl_counts <- table(wxs_seg_bis$GNL)
        loh_counts <- table(wxs_seg_bis$LOH)
        print(gnl_counts)
        print("loh count")
        print(loh_counts)
        
        # pourcentage
        gnl_percentages <- round(gnl_counts / length(wxs_seg_bis$GNL) * 100,2)
        loh_percentages <- round(loh_counts / length(wxs_seg_bis$LOH) * 100,2)
        print(gnl_percentages)
        print("loh")
        print(loh_percentages)
        
        # Stocker les resultats dans une liste
        result <- list(
          Gene = gene,
          "GLN -2" = paste(gnl_counts[2], " (", gnl_percentages[2], "%)"),
          "GNL -1" = paste(gnl_counts[1], " (", gnl_percentages[1], "%)"),
          "GNL 0" = paste(gnl_counts[3], " (", gnl_percentages[3], "%)"),
          "GNL 1" = paste(gnl_counts[4], " (", gnl_percentages[4], "%)"),
          "GNL 2" = paste(gnl_counts[5], " (", gnl_percentages[5], "%)"),
          "LOH 0" = paste(loh_counts[1], " (", loh_percentages[1], "%)"),
          "LOH 1" = paste(loh_counts[2], " (", loh_percentages[2], "%)")
        )
        
        results_list[[gene]] <- result
      }
      return(bind_rows(results_list))
    }
    
    # Group 1
    results_group1 <- generate_stats_for_group(samples_of_interest)
    results_group1$Group <- "Group 1"
    
    # Group 2
    results_group2 <- generate_stats_for_group(samples_of_interest2)
    results_group2$Group <- "Group 2"
    
    results_combined <- bind_rows(results_group1, results_group2)
    
    table_stat(results_combined)
    
    output$results_table <- renderDataTable({
      datatable(results_combined, options = list(pageLength = 10))
    })
    
    # Download
    output$downloadPlotFrequency <- downloadHandler(
      filename = function() {
        paste("Frequency_Plot_", Sys.Date(), ".png", sep = "")
      },
      content = function(file) {
        combined_plot <- arrangeGrob(gg_frequency(), gg_frequency2(), ncol = 2)
        ggsave(file, plot = combined_plot, width = 15, height = 6, units = "in", dpi = 300)
      }
    )
    
    output$downloadPlotTumorByTumor <- downloadHandler(
      filename = function() {
        paste("Tumor_By_Tumor_Plot_", Sys.Date(), ".png", sep = "")
      },
      content = function(file) {
        ggsave(file, plot = gg_tum_tum(), width = 10, height = 6, units = "in", dpi = 300)
      }
    )
    end_time <- Sys.time()
    time_elapsed <- end_time - start_time
    print(paste("Time:", round(time_elapsed, 2), "secondes"))
  })
  
  output$downloadTable <- downloadHandler(
    filename = function() {
      paste("Statistical_Table_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(table_stat(), file, row.names = FALSE)
    }
  )
}

shinyApp(ui, server)
